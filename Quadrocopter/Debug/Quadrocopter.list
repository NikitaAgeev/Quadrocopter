
Quadrocopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e0  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c04  08003c04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c04  08003c04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c04  08003c04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003c1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003c1c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084aa  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001763  00000000  00000000  000284df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00029c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011778  00000000  00000000  0002ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c16a  00000000  00000000  0003c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063bcb  00000000  00000000  00048762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ac32d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d0  00000000  00000000  000ac380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a98 	.word	0x08003a98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08003a98 	.word	0x08003a98

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <_ZN11servo_motorC1EP17TIM_HandleTypeDefm>:

	uint32_t Channel = 0;

public:
	servo_motor() = default;
	servo_motor(TIM_HandleTypeDef* _htim, uint32_t _channel): htim_ptr(_htim), Channel(_channel) {};
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f240 52db 	movw	r2, #1499	; 0x5db
 8000a04:	809a      	strh	r2, [r3, #4]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fb1b 	bl	8001056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f814 	bl	8000a4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f000 f9c8 	bl	8000db8 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000a28:	f000 f85a 	bl	8000ae0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000a2c:	f000 f914 	bl	8000c58 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  servo.change_value(1);
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <main+0x2c>)
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <main+0x30>)
 8000a38:	f002 ff8e 	bl	8003958 <_ZN11servo_motor12change_valueEd>
  servo.refresh_value();
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <main+0x30>)
 8000a3e:	f002 ffc7 	bl	80039d0 <_ZN11servo_motor13refresh_valueEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <main+0x2a>
 8000a44:	3ff00000 	.word	0x3ff00000
 8000a48:	200000b8 	.word	0x200000b8

08000a4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	; 0x40
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	2228      	movs	r2, #40	; 0x28
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f814 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a76:	2310      	movs	r3, #16
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 feb1 	bl	80017f4 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000aa2:	f000 f99f 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fa40 	bl	8001f44 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 f986 	bl	8000de4 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3740      	adds	r7, #64	; 0x40
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b096      	sub	sp, #88	; 0x58
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2220      	movs	r2, #32
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 ffb5 	bl	8003a88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b20:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <_ZL12MX_TIM1_Initv+0x174>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b30:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4a:	4841      	ldr	r0, [pc, #260]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b4c:	f001 fbcc 	bl	80022e8 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000b60:	f000 f940 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4837      	ldr	r0, [pc, #220]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b72:	f001 fee3 	bl	800293c <HAL_TIM_ConfigClockSource>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000b86:	f000 f92d 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b8a:	4831      	ldr	r0, [pc, #196]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000b8c:	f001 fc78 	bl	8002480 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8000ba0:	f000 f920 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4827      	ldr	r0, [pc, #156]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000bb4:	f002 fd30 	bl	8003618 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bf14      	ite	ne
 8000bbe:	2301      	movne	r3, #1
 8000bc0:	2300      	moveq	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000bc8:	f000 f90c 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	220c      	movs	r2, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4818      	ldr	r0, [pc, #96]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000bee:	f001 fd1d 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <_ZL12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 8000c02:	f000 f8ef 	bl	8000de4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000c2a:	f002 fdb9 	bl	80037a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf14      	ite	ne
 8000c34:	2301      	movne	r3, #1
 8000c36:	2300      	moveq	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <_ZL12MX_TIM1_Initv+0x162>
  {
    Error_Handler();
 8000c3e:	f000 f8d1 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <_ZL12MX_TIM1_Initv+0x170>)
 8000c44:	f000 f962 	bl	8000f0c <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3758      	adds	r7, #88	; 0x58
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000028 	.word	0x20000028
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c88:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000c90:	4b48      	ldr	r3, [pc, #288]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000c92:	222f      	movs	r2, #47	; 0x2f
 8000c94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000c9c:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000c9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000cb2:	f001 fb19 	bl	80022e8 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bf14      	ite	ne
 8000cbc:	2301      	movne	r3, #1
 8000cbe:	2300      	moveq	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000cc6:	f000 f88d 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4837      	ldr	r0, [pc, #220]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000cd8:	f001 fe30 	bl	800293c <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000cec:	f000 f87a 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf0:	4830      	ldr	r0, [pc, #192]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000cf2:	f001 fbc5 	bl	8002480 <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf14      	ite	ne
 8000cfc:	2301      	movne	r3, #1
 8000cfe:	2300      	moveq	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000d06:	f000 f86d 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	4619      	mov	r1, r3
 8000d18:	4826      	ldr	r0, [pc, #152]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000d1a:	f002 fc7d 	bl	8003618 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000d2e:	f000 f859 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	; 0x60
 8000d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8000d36:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2204      	movs	r2, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000d4c:	f001 fc6e 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8000d60:	f000 f840 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2208      	movs	r2, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000d6c:	f001 fc5e 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	bf14      	ite	ne
 8000d76:	2301      	movne	r3, #1
 8000d78:	2300      	moveq	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 8000d80:	f000 f830 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	220c      	movs	r2, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480a      	ldr	r0, [pc, #40]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000d8c:	f001 fc4e 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <_ZL12MX_TIM2_Initv+0x14c>
  {
    Error_Handler();
 8000da0:	f000 f820 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <_ZL12MX_TIM2_Initv+0x15c>)
 8000da6:	f000 f8b1 	bl	8000f0c <HAL_TIM_MspPostInit>

}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	; 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000070 	.word	0x20000070

08000db8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_ZL12MX_GPIO_Initv+0x28>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <_ZL12MX_GPIO_Initv+0x28>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <_ZL12MX_GPIO_Initv+0x28>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dec:	e7fe      	b.n	8000dec <Error_Handler+0x8>

08000dee <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
	...

08000e04 <_Z41__static_initialization_and_destruction_0ii>:
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d109      	bne.n	8000e28 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d104      	bne.n	8000e28 <_Z41__static_initialization_and_destruction_0ii+0x24>
servo_motor servo(&htim2, TIM_CHANNEL_2);
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4903      	ldr	r1, [pc, #12]	; (8000e30 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000e24:	f7ff fde2 	bl	80009ec <_ZN11servo_motorC1EP17TIM_HandleTypeDefm>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000070 	.word	0x20000070
 8000e34:	200000b8 	.word	0x200000b8

08000e38 <_GLOBAL__sub_I_htim1>:
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff ffdf 	bl	8000e04 <_Z41__static_initialization_and_destruction_0ii>
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_MspInit+0x60>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_MspInit+0x60>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010000 	.word	0x40010000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <HAL_TIM_Base_MspInit+0x58>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed6:	e010      	b.n	8000efa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d10b      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_Base_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_TIM_MspPostInit+0x98>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d119      	bne.n	8000f60 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_TIM_MspPostInit+0x9c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_TIM_MspPostInit+0x9c>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_TIM_MspPostInit+0x9c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <HAL_TIM_MspPostInit+0xa0>)
 8000f5a:	f000 f9dd 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f5e:	e01c      	b.n	8000f9a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d117      	bne.n	8000f9a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_TIM_MspPostInit+0x9c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_TIM_MspPostInit+0x9c>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_TIM_MspPostInit+0x9c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f82:	230e      	movs	r3, #14
 8000f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_TIM_MspPostInit+0xa0>)
 8000f96:	f000 f9bf 	bl	8001318 <HAL_GPIO_Init>
}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010800 	.word	0x40010800

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 f86b 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001032:	f7ff ffe4 	bl	8000ffe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f002 fd03 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103a:	f7ff fced 	bl	8000a18 <main>
  bx lr
 800103e:	4770      	bx	lr
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001048:	08003c10 	.word	0x08003c10
  ldr r2, =_sbss
 800104c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001050:	200000c8 	.word	0x200000c8

08001054 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC1_IRQHandler>

08001056 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f904 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001060:	200f      	movs	r0, #15
 8001062:	f000 f805 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001066:	f7ff feef 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f936 	bl	8001300 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f000 f8fc 	bl	80012a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	20000008 	.word	0x20000008
 80010f0:	200000c4 	.word	0x200000c4

080010f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	200000c4 	.word	0x200000c4

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001248:	f7ff ff90 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b07      	cmp	r3, #7
 8001274:	d00f      	beq.n	8001296 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d00c      	beq.n	8001296 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b05      	cmp	r3, #5
 8001280:	d009      	beq.n	8001296 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d006      	beq.n	8001296 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d003      	beq.n	8001296 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800128e:	2192      	movs	r1, #146	; 0x92
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001292:	f7ff fdac 	bl	8000dee <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff36 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08003ab0 	.word	0x08003ab0

080012a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d903      	bls.n	80012c8 <HAL_NVIC_SetPriority+0x20>
 80012c0:	21aa      	movs	r1, #170	; 0xaa
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <HAL_NVIC_SetPriority+0x54>)
 80012c4:	f7ff fd93 	bl	8000dee <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	d903      	bls.n	80012d6 <HAL_NVIC_SetPriority+0x2e>
 80012ce:	21ab      	movs	r1, #171	; 0xab
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <HAL_NVIC_SetPriority+0x54>)
 80012d2:	f7ff fd8c 	bl	8000dee <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d6:	f7ff ff3b 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff ff6d 	bl	80011c0 <NVIC_EncodePriority>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff3c 	bl	800116c <__NVIC_SetPriority>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08003ab0 	.word	0x08003ab0

08001300 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff8b 	bl	8001224 <SysTick_Config>
 800130e:	4603      	mov	r3, r0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a96      	ldr	r2, [pc, #600]	; (8001588 <HAL_GPIO_Init+0x270>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x42>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a95      	ldr	r2, [pc, #596]	; (800158c <HAL_GPIO_Init+0x274>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00f      	beq.n	800135a <HAL_GPIO_Init+0x42>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a94      	ldr	r2, [pc, #592]	; (8001590 <HAL_GPIO_Init+0x278>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00b      	beq.n	800135a <HAL_GPIO_Init+0x42>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a93      	ldr	r2, [pc, #588]	; (8001594 <HAL_GPIO_Init+0x27c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x42>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a92      	ldr	r2, [pc, #584]	; (8001598 <HAL_GPIO_Init+0x280>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x42>
 8001352:	21bd      	movs	r1, #189	; 0xbd
 8001354:	4891      	ldr	r0, [pc, #580]	; (800159c <HAL_GPIO_Init+0x284>)
 8001356:	f7ff fd4a 	bl	8000dee <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x58>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	041b      	lsls	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x60>
 8001370:	21be      	movs	r1, #190	; 0xbe
 8001372:	488a      	ldr	r0, [pc, #552]	; (800159c <HAL_GPIO_Init+0x284>)
 8001374:	f7ff fd3b 	bl	8000dee <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 821c 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f000 8217 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b11      	cmp	r3, #17
 8001392:	f000 8212 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	f000 820d 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	f000 8208 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a7c      	ldr	r2, [pc, #496]	; (80015a0 <HAL_GPIO_Init+0x288>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	f000 8202 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <HAL_GPIO_Init+0x28c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	f000 81fc 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a78      	ldr	r2, [pc, #480]	; (80015a8 <HAL_GPIO_Init+0x290>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f000 81f6 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a76      	ldr	r2, [pc, #472]	; (80015ac <HAL_GPIO_Init+0x294>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f000 81f0 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a74      	ldr	r2, [pc, #464]	; (80015b0 <HAL_GPIO_Init+0x298>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	f000 81ea 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a72      	ldr	r2, [pc, #456]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	f000 81e4 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	f000 81df 	beq.w	80017ba <HAL_GPIO_Init+0x4a2>
 80013fc:	21bf      	movs	r1, #191	; 0xbf
 80013fe:	4867      	ldr	r0, [pc, #412]	; (800159c <HAL_GPIO_Init+0x284>)
 8001400:	f7ff fcf5 	bl	8000dee <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001404:	e1d9      	b.n	80017ba <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001406:	2201      	movs	r2, #1
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	429a      	cmp	r2, r3
 8001420:	f040 81c8 	bne.w	80017b4 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a58      	ldr	r2, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x270>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d013      	beq.n	8001454 <HAL_GPIO_Init+0x13c>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_GPIO_Init+0x274>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00f      	beq.n	8001454 <HAL_GPIO_Init+0x13c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_GPIO_Init+0x278>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00b      	beq.n	8001454 <HAL_GPIO_Init+0x13c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a55      	ldr	r2, [pc, #340]	; (8001594 <HAL_GPIO_Init+0x27c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x13c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a54      	ldr	r2, [pc, #336]	; (8001598 <HAL_GPIO_Init+0x280>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x13c>
 800144c:	21cd      	movs	r1, #205	; 0xcd
 800144e:	4853      	ldr	r0, [pc, #332]	; (800159c <HAL_GPIO_Init+0x284>)
 8001450:	f7ff fccd 	bl	8000dee <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a56      	ldr	r2, [pc, #344]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	f000 80c1 	beq.w	80015e2 <HAL_GPIO_Init+0x2ca>
 8001460:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	f200 80e7 	bhi.w	8001636 <HAL_GPIO_Init+0x31e>
 8001468:	4a4f      	ldr	r2, [pc, #316]	; (80015a8 <HAL_GPIO_Init+0x290>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f000 80b9 	beq.w	80015e2 <HAL_GPIO_Init+0x2ca>
 8001470:	4a4d      	ldr	r2, [pc, #308]	; (80015a8 <HAL_GPIO_Init+0x290>)
 8001472:	4293      	cmp	r3, r2
 8001474:	f200 80df 	bhi.w	8001636 <HAL_GPIO_Init+0x31e>
 8001478:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_GPIO_Init+0x298>)
 800147a:	4293      	cmp	r3, r2
 800147c:	f000 80b1 	beq.w	80015e2 <HAL_GPIO_Init+0x2ca>
 8001480:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001482:	4293      	cmp	r3, r2
 8001484:	f200 80d7 	bhi.w	8001636 <HAL_GPIO_Init+0x31e>
 8001488:	4a46      	ldr	r2, [pc, #280]	; (80015a4 <HAL_GPIO_Init+0x28c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	f000 80a9 	beq.w	80015e2 <HAL_GPIO_Init+0x2ca>
 8001490:	4a44      	ldr	r2, [pc, #272]	; (80015a4 <HAL_GPIO_Init+0x28c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f200 80cf 	bhi.w	8001636 <HAL_GPIO_Init+0x31e>
 8001498:	4a44      	ldr	r2, [pc, #272]	; (80015ac <HAL_GPIO_Init+0x294>)
 800149a:	4293      	cmp	r3, r2
 800149c:	f000 80a1 	beq.w	80015e2 <HAL_GPIO_Init+0x2ca>
 80014a0:	4a42      	ldr	r2, [pc, #264]	; (80015ac <HAL_GPIO_Init+0x294>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	f200 80c7 	bhi.w	8001636 <HAL_GPIO_Init+0x31e>
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d82b      	bhi.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014ac:	2b12      	cmp	r3, #18
 80014ae:	f200 80c2 	bhi.w	8001636 <HAL_GPIO_Init+0x31e>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <HAL_GPIO_Init+0x1a0>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	080015e3 	.word	0x080015e3
 80014bc:	0800150d 	.word	0x0800150d
 80014c0:	0800155f 	.word	0x0800155f
 80014c4:	08001631 	.word	0x08001631
 80014c8:	08001637 	.word	0x08001637
 80014cc:	08001637 	.word	0x08001637
 80014d0:	08001637 	.word	0x08001637
 80014d4:	08001637 	.word	0x08001637
 80014d8:	08001637 	.word	0x08001637
 80014dc:	08001637 	.word	0x08001637
 80014e0:	08001637 	.word	0x08001637
 80014e4:	08001637 	.word	0x08001637
 80014e8:	08001637 	.word	0x08001637
 80014ec:	08001637 	.word	0x08001637
 80014f0:	08001637 	.word	0x08001637
 80014f4:	08001637 	.word	0x08001637
 80014f8:	08001637 	.word	0x08001637
 80014fc:	08001535 	.word	0x08001535
 8001500:	080015b9 	.word	0x080015b9
 8001504:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x288>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d06b      	beq.n	80015e2 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150a:	e094      	b.n	8001636 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d00b      	beq.n	800152c <HAL_GPIO_Init+0x214>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x214>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x214>
 8001524:	21d5      	movs	r1, #213	; 0xd5
 8001526:	481d      	ldr	r0, [pc, #116]	; (800159c <HAL_GPIO_Init+0x284>)
 8001528:	f7ff fc61 	bl	8000dee <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e081      	b.n	8001638 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d00b      	beq.n	8001554 <HAL_GPIO_Init+0x23c>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x23c>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x23c>
 800154c:	21dc      	movs	r1, #220	; 0xdc
 800154e:	4813      	ldr	r0, [pc, #76]	; (800159c <HAL_GPIO_Init+0x284>)
 8001550:	f7ff fc4d 	bl	8000dee <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	3304      	adds	r3, #4
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e06c      	b.n	8001638 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d00b      	beq.n	800157e <HAL_GPIO_Init+0x266>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x266>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x266>
 8001576:	21e3      	movs	r1, #227	; 0xe3
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <HAL_GPIO_Init+0x284>)
 800157a:	f7ff fc38 	bl	8000dee <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e057      	b.n	8001638 <HAL_GPIO_Init+0x320>
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000
 8001594:	40011400 	.word	0x40011400
 8001598:	40011800 	.word	0x40011800
 800159c:	08003aec 	.word	0x08003aec
 80015a0:	10110000 	.word	0x10110000
 80015a4:	10210000 	.word	0x10210000
 80015a8:	10310000 	.word	0x10310000
 80015ac:	10120000 	.word	0x10120000
 80015b0:	10220000 	.word	0x10220000
 80015b4:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d00b      	beq.n	80015d8 <HAL_GPIO_Init+0x2c0>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x2c0>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2c0>
 80015d0:	21ea      	movs	r1, #234	; 0xea
 80015d2:	4880      	ldr	r0, [pc, #512]	; (80017d4 <HAL_GPIO_Init+0x4bc>)
 80015d4:	f7ff fc0b 	bl	8000dee <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e02a      	b.n	8001638 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_GPIO_Init+0x2ea>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x2ea>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2ea>
 80015fa:	21f7      	movs	r1, #247	; 0xf7
 80015fc:	4875      	ldr	r0, [pc, #468]	; (80017d4 <HAL_GPIO_Init+0x4bc>)
 80015fe:	f7ff fbf6 	bl	8000dee <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e013      	b.n	8001638 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e009      	b.n	8001638 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e003      	b.n	8001638 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x320>
          break;
 8001636:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d801      	bhi.n	8001642 <HAL_GPIO_Init+0x32a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_Init+0x32e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d802      	bhi.n	8001654 <HAL_GPIO_Init+0x33c>
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x342>
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3b08      	subs	r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8096 	beq.w	80017b4 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x4c0>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x4c0>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_GPIO_Init+0x4c0>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	4a4e      	ldr	r2, [pc, #312]	; (80017dc <HAL_GPIO_Init+0x4c4>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a46      	ldr	r2, [pc, #280]	; (80017e0 <HAL_GPIO_Init+0x4c8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_GPIO_Init+0x3dc>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a45      	ldr	r2, [pc, #276]	; (80017e4 <HAL_GPIO_Init+0x4cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00d      	beq.n	80016f0 <HAL_GPIO_Init+0x3d8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <HAL_GPIO_Init+0x4d0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x3d4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a43      	ldr	r2, [pc, #268]	; (80017ec <HAL_GPIO_Init+0x4d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_GPIO_Init+0x3d0>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x3de>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x3de>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x3de>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x3de>
 80016f4:	2300      	movs	r3, #0
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001706:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x4c4>)
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4932      	ldr	r1, [pc, #200]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	492e      	ldr	r1, [pc, #184]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001738:	4013      	ands	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4928      	ldr	r1, [pc, #160]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4924      	ldr	r1, [pc, #144]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001760:	4013      	ands	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	491e      	ldr	r1, [pc, #120]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	491a      	ldr	r1, [pc, #104]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 8001788:	4013      	ands	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4914      	ldr	r1, [pc, #80]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4910      	ldr	r1, [pc, #64]	; (80017f0 <HAL_GPIO_Init+0x4d8>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3301      	adds	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f47f ae1e 	bne.w	8001406 <HAL_GPIO_Init+0xee>
  }
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	08003aec 	.word	0x08003aec
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40011400 	.word	0x40011400
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e398      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01c      	beq.n	8001848 <HAL_RCC_OscConfig+0x54>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x54>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d110      	bne.n	8001848 <HAL_RCC_OscConfig+0x54>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10a      	bne.n	8001848 <HAL_RCC_OscConfig+0x54>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <HAL_RCC_OscConfig+0x54>
 800183e:	f240 1167 	movw	r1, #359	; 0x167
 8001842:	488f      	ldr	r0, [pc, #572]	; (8001a80 <HAL_RCC_OscConfig+0x28c>)
 8001844:	f7ff fad3 	bl	8000dee <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 809a 	beq.w	800198a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <HAL_RCC_OscConfig+0x88>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d009      	beq.n	800187c <HAL_RCC_OscConfig+0x88>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001870:	d004      	beq.n	800187c <HAL_RCC_OscConfig+0x88>
 8001872:	f240 116d 	movw	r1, #365	; 0x16d
 8001876:	4882      	ldr	r0, [pc, #520]	; (8001a80 <HAL_RCC_OscConfig+0x28c>)
 8001878:	f7ff fab9 	bl	8000dee <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187c:	4b81      	ldr	r3, [pc, #516]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b04      	cmp	r3, #4
 8001886:	d00c      	beq.n	80018a2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001888:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d112      	bne.n	80018ba <HAL_RCC_OscConfig+0xc6>
 8001894:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d10b      	bne.n	80018ba <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06c      	beq.n	8001988 <HAL_RCC_OscConfig+0x194>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d168      	bne.n	8001988 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e33e      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0xde>
 80018c4:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6e      	ldr	r2, [pc, #440]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e02e      	b.n	8001930 <HAL_RCC_OscConfig+0x13c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x100>
 80018da:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a66      	ldr	r2, [pc, #408]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0x13c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x124>
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a60      	ldr	r2, [pc, #384]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5d      	ldr	r2, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x13c>
 8001918:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a59      	ldr	r2, [pc, #356]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b57      	ldr	r3, [pc, #348]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a56      	ldr	r2, [pc, #344]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fbdc 	bl	80010f4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fbd8 	bl	80010f4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e2f2      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x14c>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fbc8 	bl	80010f4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fbc4 	bl	80010f4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e2de      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x174>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8080 	beq.w	8001a98 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1be>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d004      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1be>
 80019a8:	f240 11a1 	movw	r1, #417	; 0x1a1
 80019ac:	4834      	ldr	r0, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x28c>)
 80019ae:	f7ff fa1e 	bl	8000dee <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	d904      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1d0>
 80019ba:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <HAL_RCC_OscConfig+0x28c>)
 80019c0:	f7ff fa15 	bl	8000dee <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d11c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x222>
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d116      	bne.n	8001a16 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x20c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e29b      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	491d      	ldr	r1, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a14:	e040      	b.n	8001a98 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d020      	beq.n	8001a60 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x294>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fb66 	bl	80010f4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb62 	bl	80010f4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e27c      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	490a      	ldr	r1, [pc, #40]	; (8001a84 <HAL_RCC_OscConfig+0x290>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
 8001a5e:	e01b      	b.n	8001a98 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_OscConfig+0x294>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fb45 	bl	80010f4 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6c:	e00e      	b.n	8001a8c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fb41 	bl	80010f4 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d907      	bls.n	8001a8c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e25b      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
 8001a80:	08003b28 	.word	0x08003b28
 8001a84:	40021000 	.word	0x40021000
 8001a88:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8c:	4b7d      	ldr	r3, [pc, #500]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ea      	bne.n	8001a6e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d040      	beq.n	8001b26 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_OscConfig+0x2ca>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d004      	beq.n	8001abe <HAL_RCC_OscConfig+0x2ca>
 8001ab4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001ab8:	4873      	ldr	r0, [pc, #460]	; (8001c88 <HAL_RCC_OscConfig+0x494>)
 8001aba:	f7ff f998 	bl	8000dee <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <HAL_RCC_OscConfig+0x498>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fb12 	bl	80010f4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fb0e 	bl	80010f4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e228      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f000 fbda 	bl	80022ac <RCC_Delay>
 8001af8:	e015      	b.n	8001b26 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <HAL_RCC_OscConfig+0x498>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff faf8 	bl	80010f4 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff faf4 	bl	80010f4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e20e      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80bf 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x366>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_OscConfig+0x366>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d004      	beq.n	8001b5a <HAL_RCC_OscConfig+0x366>
 8001b50:	f240 2111 	movw	r1, #529	; 0x211
 8001b54:	484c      	ldr	r0, [pc, #304]	; (8001c88 <HAL_RCC_OscConfig+0x494>)
 8001b56:	f7ff f94a 	bl	8000dee <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10d      	bne.n	8001b82 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x49c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x49c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a3f      	ldr	r2, [pc, #252]	; (8001c90 <HAL_RCC_OscConfig+0x49c>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff faab 	bl	80010f4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff faa7 	bl	80010f4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1c1      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x49c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3e2>
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e02d      	b.n	8001c32 <HAL_RCC_OscConfig+0x43e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x404>
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	e01c      	b.n	8001c32 <HAL_RCC_OscConfig+0x43e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x426>
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0x43e>
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fa5b 	bl	80010f4 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff fa57 	bl	80010f4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e16f      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_OscConfig+0x490>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ee      	beq.n	8001c42 <HAL_RCC_OscConfig+0x44e>
 8001c64:	e01c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa45 	bl	80010f4 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	e012      	b.n	8001c94 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7ff fa41 	bl	80010f4 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d909      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e159      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08003b28 	.word	0x08003b28
 8001c8c:	42420480 	.word	0x42420480
 8001c90:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	4b90      	ldr	r3, [pc, #576]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e6      	bne.n	8001c6e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca6:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a8b      	ldr	r2, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4e0>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d008      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4e0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4e0>
 8001cca:	f240 21af 	movw	r1, #687	; 0x2af
 8001cce:	4883      	ldr	r0, [pc, #524]	; (8001edc <HAL_RCC_OscConfig+0x6e8>)
 8001cd0:	f7ff f88d 	bl	8000dee <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 812c 	beq.w	8001f36 <HAL_RCC_OscConfig+0x742>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cde:	4b7e      	ldr	r3, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	f000 810c 	beq.w	8001f04 <HAL_RCC_OscConfig+0x710>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	f040 80e9 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_OscConfig+0x51e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d06:	d004      	beq.n	8001d12 <HAL_RCC_OscConfig+0x51e>
 8001d08:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001d0c:	4873      	ldr	r0, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x6e8>)
 8001d0e:	f7ff f86e 	bl	8000dee <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04a      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d22:	d045      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d2c:	d040      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d36:	d03b      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d40:	d036      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d4a:	d031      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001d54:	d02c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001d5e:	d027      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d68:	d022      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001d72:	d01d      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001d7c:	d018      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d90:	d00e      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001da4:	d004      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5bc>
 8001da6:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001daa:	484c      	ldr	r0, [pc, #304]	; (8001edc <HAL_RCC_OscConfig+0x6e8>)
 8001dac:	f7ff f81f 	bl	8000dee <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <HAL_RCC_OscConfig+0x6ec>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f99d 	bl	80010f4 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f999 	bl	80010f4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0b3      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de4:	d14d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x68e>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d03c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d038      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d034      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d030      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d02c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d028      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	d024      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d020      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b09      	cmp	r3, #9
 8001e34:	d01c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d018      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b0b      	cmp	r3, #11
 8001e44:	d014      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b0d      	cmp	r3, #13
 8001e54:	d00c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b0e      	cmp	r3, #14
 8001e5c:	d008      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d004      	beq.n	8001e70 <HAL_RCC_OscConfig+0x67c>
 8001e66:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001e6a:	481c      	ldr	r0, [pc, #112]	; (8001edc <HAL_RCC_OscConfig+0x6e8>)
 8001e6c:	f7fe ffbf 	bl	8000dee <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f023 020f 	bic.w	r2, r3, #15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a19      	ldr	r1, [r3, #32]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	430b      	orrs	r3, r1
 8001e94:	4910      	ldr	r1, [pc, #64]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_OscConfig+0x6ec>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f928 	bl	80010f4 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff f924 	bl	80010f4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e03e      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_RCC_OscConfig+0x6e4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x6b4>
 8001ec6:	e036      	b.n	8001f36 <HAL_RCC_OscConfig+0x742>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_OscConfig+0x6ec>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff f911 	bl	80010f4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	e00f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x702>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08003b28 	.word	0x08003b28
 8001ee0:	42420060 	.word	0x42420060
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f906 	bl	80010f4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x702>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e020      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_OscConfig+0x74c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x6f0>
 8001f02:	e018      	b.n	8001f36 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x71c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_OscConfig+0x74c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x73e>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x742>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x744>
        }
      }
    }
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e139      	b.n	80021cc <HAL_RCC_ClockConfig+0x288>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d116      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x4e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d110      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x4e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x4e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x4e>
 8001f88:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001f8c:	4891      	ldr	r0, [pc, #580]	; (80021d4 <HAL_RCC_ClockConfig+0x290>)
 8001f8e:	f7fe ff2e 	bl	8000dee <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x5e>
 8001f98:	f240 3139 	movw	r1, #825	; 0x339
 8001f9c:	488d      	ldr	r0, [pc, #564]	; (80021d4 <HAL_RCC_ClockConfig+0x290>)
 8001f9e:	f7fe ff26 	bl	8000dee <assert_failed>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d049      	beq.n	8002042 <HAL_RCC_ClockConfig+0xfe>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fba:	4b87      	ldr	r3, [pc, #540]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a86      	ldr	r2, [pc, #536]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8001fc0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_ClockConfig+0x9a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd2:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a80      	ldr	r2, [pc, #512]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8001fd8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fdc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d024      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d020      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b90      	cmp	r3, #144	; 0x90
 8001ff4:	d01c      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8001ffc:	d018      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2bb0      	cmp	r3, #176	; 0xb0
 8002004:	d014      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2bc0      	cmp	r3, #192	; 0xc0
 800200c:	d010      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2bd0      	cmp	r3, #208	; 0xd0
 8002014:	d00c      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2be0      	cmp	r3, #224	; 0xe0
 800201c:	d008      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2bf0      	cmp	r3, #240	; 0xf0
 8002024:	d004      	beq.n	8002030 <HAL_RCC_ClockConfig+0xec>
 8002026:	f240 315f 	movw	r1, #863	; 0x35f
 800202a:	486a      	ldr	r0, [pc, #424]	; (80021d4 <HAL_RCC_ClockConfig+0x290>)
 800202c:	f7fe fedf 	bl	8000dee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b69      	ldr	r3, [pc, #420]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4966      	ldr	r1, [pc, #408]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d051      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_RCC_ClockConfig+0x12c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d008      	beq.n	8002070 <HAL_RCC_ClockConfig+0x12c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d004      	beq.n	8002070 <HAL_RCC_ClockConfig+0x12c>
 8002066:	f240 3166 	movw	r1, #870	; 0x366
 800206a:	485a      	ldr	r0, [pc, #360]	; (80021d4 <HAL_RCC_ClockConfig+0x290>)
 800206c:	f7fe febf 	bl	8000dee <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002078:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0a1      	b.n	80021cc <HAL_RCC_ClockConfig+0x288>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e095      	b.n	80021cc <HAL_RCC_ClockConfig+0x288>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e08d      	b.n	80021cc <HAL_RCC_ClockConfig+0x288>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b0:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 0203 	bic.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4946      	ldr	r1, [pc, #280]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c2:	f7ff f817 	bl	80010f4 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_ClockConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ca:	f7ff f813 	bl	80010f4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x19c>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e075      	b.n	80021cc <HAL_RCC_ClockConfig+0x288>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 020c 	and.w	r2, r3, #12
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d1eb      	bne.n	80020ca <HAL_RCC_ClockConfig+0x186>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d025      	beq.n	800214a <HAL_RCC_ClockConfig+0x206>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d018      	beq.n	8002138 <HAL_RCC_ClockConfig+0x1f4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	d013      	beq.n	8002138 <HAL_RCC_ClockConfig+0x1f4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002118:	d00e      	beq.n	8002138 <HAL_RCC_ClockConfig+0x1f4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002122:	d009      	beq.n	8002138 <HAL_RCC_ClockConfig+0x1f4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800212c:	d004      	beq.n	8002138 <HAL_RCC_ClockConfig+0x1f4>
 800212e:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002132:	4828      	ldr	r0, [pc, #160]	; (80021d4 <HAL_RCC_ClockConfig+0x290>)
 8002134:	f7fe fe5b 	bl	8000dee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4924      	ldr	r1, [pc, #144]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d026      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x260>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d018      	beq.n	8002190 <HAL_RCC_ClockConfig+0x24c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	d013      	beq.n	8002190 <HAL_RCC_ClockConfig+0x24c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002170:	d00e      	beq.n	8002190 <HAL_RCC_ClockConfig+0x24c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800217a:	d009      	beq.n	8002190 <HAL_RCC_ClockConfig+0x24c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002184:	d004      	beq.n	8002190 <HAL_RCC_ClockConfig+0x24c>
 8002186:	f240 31ab 	movw	r1, #939	; 0x3ab
 800218a:	4812      	ldr	r0, [pc, #72]	; (80021d4 <HAL_RCC_ClockConfig+0x290>)
 800218c:	f7fe fe2f 	bl	8000dee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a4:	f000 f820 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x294>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	4909      	ldr	r1, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x298>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_RCC_ClockConfig+0x29c>)
 80021be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_RCC_ClockConfig+0x2a0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe ff53 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	08003b28 	.word	0x08003b28
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08003bf4 	.word	0x08003bf4
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b490      	push	{r4, r7}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f0:	f107 0414 	add.w	r4, r7, #20
 80021f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021fc:	1d3c      	adds	r4, r7, #4
 80021fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
 800220c:	2300      	movs	r3, #0
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d002      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x46>
 8002228:	2b08      	cmp	r3, #8
 800222a:	d003      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x4c>
 800222c:	e02a      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002232:	e02a      	b.n	800228a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	0c9b      	lsrs	r3, r3, #18
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	3338      	adds	r3, #56	; 0x38
 800223e:	443b      	add	r3, r7
 8002240:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d011      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	3338      	adds	r3, #56	; 0x38
 800225a:	443b      	add	r3, r7
 800225c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002266:	fb03 f202 	mul.w	r2, r3, r2
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
 8002272:	e004      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002282:	e002      	b.n	800228a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800228c:	4618      	mov	r0, r3
 800228e:	3738      	adds	r7, #56	; 0x38
 8002290:	46bd      	mov	sp, r7
 8002292:	bc90      	pop	{r4, r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	08003b60 	.word	0x08003b60
 800229c:	08003b70 	.word	0x08003b70
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	003d0900 	.word	0x003d0900

080022ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <RCC_Delay+0x34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <RCC_Delay+0x38>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a5b      	lsrs	r3, r3, #9
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c8:	bf00      	nop
  }
  while (Delay --);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	60fa      	str	r2, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <RCC_Delay+0x1c>
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000000 	.word	0x20000000
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0ac      	b.n	8002454 <HAL_TIM_Base_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_TIM_Base_Init+0x174>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d02c      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230c:	d027      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a53      	ldr	r2, [pc, #332]	; (8002460 <HAL_TIM_Base_Init+0x178>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d022      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a51      	ldr	r2, [pc, #324]	; (8002464 <HAL_TIM_Base_Init+0x17c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01d      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a50      	ldr	r2, [pc, #320]	; (8002468 <HAL_TIM_Base_Init+0x180>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d018      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_TIM_Base_Init+0x184>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_TIM_Base_Init+0x188>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00e      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a4b      	ldr	r2, [pc, #300]	; (8002474 <HAL_TIM_Base_Init+0x18c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4a      	ldr	r2, [pc, #296]	; (8002478 <HAL_TIM_Base_Init+0x190>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <HAL_TIM_Base_Init+0x76>
 8002354:	f240 1113 	movw	r1, #275	; 0x113
 8002358:	4848      	ldr	r0, [pc, #288]	; (800247c <HAL_TIM_Base_Init+0x194>)
 800235a:	f7fe fd48 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <HAL_TIM_Base_Init+0xa8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b10      	cmp	r3, #16
 800236c:	d010      	beq.n	8002390 <HAL_TIM_Base_Init+0xa8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b20      	cmp	r3, #32
 8002374:	d00c      	beq.n	8002390 <HAL_TIM_Base_Init+0xa8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d008      	beq.n	8002390 <HAL_TIM_Base_Init+0xa8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b60      	cmp	r3, #96	; 0x60
 8002384:	d004      	beq.n	8002390 <HAL_TIM_Base_Init+0xa8>
 8002386:	f44f 718a 	mov.w	r1, #276	; 0x114
 800238a:	483c      	ldr	r0, [pc, #240]	; (800247c <HAL_TIM_Base_Init+0x194>)
 800238c:	f7fe fd2f 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <HAL_TIM_Base_Init+0xce>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a0:	d009      	beq.n	80023b6 <HAL_TIM_Base_Init+0xce>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023aa:	d004      	beq.n	80023b6 <HAL_TIM_Base_Init+0xce>
 80023ac:	f240 1115 	movw	r1, #277	; 0x115
 80023b0:	4832      	ldr	r0, [pc, #200]	; (800247c <HAL_TIM_Base_Init+0x194>)
 80023b2:	f7fe fd1c 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_TIM_Base_Init+0xe8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d004      	beq.n	80023d0 <HAL_TIM_Base_Init+0xe8>
 80023c6:	f44f 718b 	mov.w	r1, #278	; 0x116
 80023ca:	482c      	ldr	r0, [pc, #176]	; (800247c <HAL_TIM_Base_Init+0x194>)
 80023cc:	f7fe fd0f 	bl	8000dee <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fd61 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 fd8b 	bl	8002f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40000400 	.word	0x40000400
 8002464:	40000800 	.word	0x40000800
 8002468:	40001000 	.word	0x40001000
 800246c:	40001400 	.word	0x40001400
 8002470:	40014000 	.word	0x40014000
 8002474:	40014400 	.word	0x40014400
 8002478:	40014800 	.word	0x40014800
 800247c:	08003b80 	.word	0x08003b80

08002480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0ac      	b.n	80025ec <HAL_TIM_PWM_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_TIM_PWM_Init+0x174>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02c      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d027      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <HAL_TIM_PWM_Init+0x178>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_TIM_PWM_Init+0x17c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_TIM_PWM_Init+0x180>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <HAL_TIM_PWM_Init+0x184>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <HAL_TIM_PWM_Init+0x188>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a4b      	ldr	r2, [pc, #300]	; (800260c <HAL_TIM_PWM_Init+0x18c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	; (8002610 <HAL_TIM_PWM_Init+0x190>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_TIM_PWM_Init+0x76>
 80024ec:	f240 5113 	movw	r1, #1299	; 0x513
 80024f0:	4848      	ldr	r0, [pc, #288]	; (8002614 <HAL_TIM_PWM_Init+0x194>)
 80024f2:	f7fe fc7c 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d014      	beq.n	8002528 <HAL_TIM_PWM_Init+0xa8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d010      	beq.n	8002528 <HAL_TIM_PWM_Init+0xa8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b20      	cmp	r3, #32
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_PWM_Init+0xa8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d008      	beq.n	8002528 <HAL_TIM_PWM_Init+0xa8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b60      	cmp	r3, #96	; 0x60
 800251c:	d004      	beq.n	8002528 <HAL_TIM_PWM_Init+0xa8>
 800251e:	f240 5114 	movw	r1, #1300	; 0x514
 8002522:	483c      	ldr	r0, [pc, #240]	; (8002614 <HAL_TIM_PWM_Init+0x194>)
 8002524:	f7fe fc63 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <HAL_TIM_PWM_Init+0xce>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d009      	beq.n	800254e <HAL_TIM_PWM_Init+0xce>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002542:	d004      	beq.n	800254e <HAL_TIM_PWM_Init+0xce>
 8002544:	f240 5115 	movw	r1, #1301	; 0x515
 8002548:	4832      	ldr	r0, [pc, #200]	; (8002614 <HAL_TIM_PWM_Init+0x194>)
 800254a:	f7fe fc50 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_TIM_PWM_Init+0xe8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b80      	cmp	r3, #128	; 0x80
 800255c:	d004      	beq.n	8002568 <HAL_TIM_PWM_Init+0xe8>
 800255e:	f240 5116 	movw	r1, #1302	; 0x516
 8002562:	482c      	ldr	r0, [pc, #176]	; (8002614 <HAL_TIM_PWM_Init+0x194>)
 8002564:	f7fe fc43 	bl	8000dee <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f84b 	bl	8002618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 fcbf 	bl	8002f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800
 8002600:	40001000 	.word	0x40001000
 8002604:	40001400 	.word	0x40001400
 8002608:	40014000 	.word	0x40014000
 800260c:	40014400 	.word	0x40014400
 8002610:	40014800 	.word	0x40014800
 8002614:	08003b80 	.word	0x08003b80

08002618 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x34>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00d      	beq.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d00a      	beq.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x34>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d007      	beq.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b3c      	cmp	r3, #60	; 0x3c
 8002654:	d004      	beq.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002656:	f241 0127 	movw	r1, #4135	; 0x1027
 800265a:	488b      	ldr	r0, [pc, #556]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800265c:	f7fe fbc7 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b60      	cmp	r3, #96	; 0x60
 8002666:	d008      	beq.n	800267a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d004      	beq.n	800267a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002670:	f241 0128 	movw	r1, #4136	; 0x1028
 8002674:	4884      	ldr	r0, [pc, #528]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8002676:	f7fe fbba 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_TIM_PWM_ConfigChannel+0x68>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d004      	beq.n	8002694 <HAL_TIM_PWM_ConfigChannel+0x68>
 800268a:	f241 0129 	movw	r1, #4137	; 0x1029
 800268e:	487e      	ldr	r0, [pc, #504]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8002690:	f7fe fbad 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x82>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d004      	beq.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x82>
 80026a4:	f241 012a 	movw	r1, #4138	; 0x102a
 80026a8:	4877      	ldr	r0, [pc, #476]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80026aa:	f7fe fba0 	bl	8000dee <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_PWM_ConfigChannel+0x90>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e133      	b.n	8002924 <HAL_TIM_PWM_ConfigChannel+0x2f8>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	f200 8126 	bhi.w	8002918 <HAL_TIM_PWM_ConfigChannel+0x2ec>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002709 	.word	0x08002709
 80026d8:	08002919 	.word	0x08002919
 80026dc:	08002919 	.word	0x08002919
 80026e0:	08002919 	.word	0x08002919
 80026e4:	08002799 	.word	0x08002799
 80026e8:	08002919 	.word	0x08002919
 80026ec:	08002919 	.word	0x08002919
 80026f0:	08002919 	.word	0x08002919
 80026f4:	08002817 	.word	0x08002817
 80026f8:	08002919 	.word	0x08002919
 80026fc:	08002919 	.word	0x08002919
 8002700:	08002919 	.word	0x08002919
 8002704:	080028a5 	.word	0x080028a5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d022      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d01d      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5b      	ldr	r2, [pc, #364]	; (8002890 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a5a      	ldr	r2, [pc, #360]	; (8002894 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800274e:	f241 0134 	movw	r1, #4148	; 0x1034
 8002752:	484d      	ldr	r0, [pc, #308]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8002754:	f7fe fb4b 	bl	8000dee <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fc5a 	bl	8003018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0208 	orr.w	r2, r2, #8
 8002772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	619a      	str	r2, [r3, #24]
      break;
 8002796:	e0c0      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x2ee>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d018      	beq.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d013      	beq.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a37      	ldr	r2, [pc, #220]	; (8002890 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a36      	ldr	r2, [pc, #216]	; (8002894 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a34      	ldr	r2, [pc, #208]	; (8002898 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80027ca:	f241 0145 	movw	r1, #4165	; 0x1045
 80027ce:	482e      	ldr	r0, [pc, #184]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80027d0:	f7fe fb0d 	bl	8000dee <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fcca 	bl	8003174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6999      	ldr	r1, [r3, #24]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	021a      	lsls	r2, r3, #8
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	619a      	str	r2, [r3, #24]
      break;
 8002814:	e081      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x2ee>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x21c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x21c>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x21c>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x21c>
 800283e:	f241 0156 	movw	r1, #4182	; 0x1056
 8002842:	4811      	ldr	r0, [pc, #68]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8002844:	f7fe fad3 	bl	8000dee <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fd36 	bl	80032c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0208 	orr.w	r2, r2, #8
 8002862:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69d9      	ldr	r1, [r3, #28]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	61da      	str	r2, [r3, #28]
      break;
 8002886:	e048      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x2ee>
 8002888:	08003b80 	.word	0x08003b80
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40014000 	.word	0x40014000
 800289c:	40014400 	.word	0x40014400
 80028a0:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <HAL_TIM_PWM_ConfigChannel+0x300>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x2aa>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d00e      	beq.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x2aa>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_TIM_PWM_ConfigChannel+0x304>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x2aa>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_TIM_PWM_ConfigChannel+0x308>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIM_PWM_ConfigChannel+0x2aa>
 80028cc:	f241 0167 	movw	r1, #4199	; 0x1067
 80028d0:	4819      	ldr	r0, [pc, #100]	; (8002938 <HAL_TIM_PWM_ConfigChannel+0x30c>)
 80028d2:	f7fe fa8c 	bl	8000dee <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fd95 	bl	800340c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69d9      	ldr	r1, [r3, #28]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	61da      	str	r2, [r3, #28]
      break;
 8002916:	e000      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x2ee>
    }

    default:
      break;
 8002918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	08003b80 	.word	0x08003b80

0800293c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIM_ConfigClockSource+0x18>
 8002950:	2302      	movs	r3, #2
 8002952:	e2d3      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x5c0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296c:	d029      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002976:	d024      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b10      	cmp	r3, #16
 8002986:	d01c      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b20      	cmp	r3, #32
 800298e:	d018      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b30      	cmp	r3, #48	; 0x30
 8002996:	d014      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d010      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b50      	cmp	r3, #80	; 0x50
 80029a6:	d00c      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d008      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b70      	cmp	r3, #112	; 0x70
 80029b6:	d004      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x86>
 80029b8:	f241 4132 	movw	r1, #5170	; 0x1432
 80029bc:	487a      	ldr	r0, [pc, #488]	; (8002ba8 <HAL_TIM_ConfigClockSource+0x26c>)
 80029be:	f7fe fa16 	bl	8000dee <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ea:	f000 80ef 	beq.w	8002bcc <HAL_TIM_ConfigClockSource+0x290>
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	f200 8277 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fa:	d02d      	beq.n	8002a58 <HAL_TIM_ConfigClockSource+0x11c>
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	f200 8270 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a04:	2b70      	cmp	r3, #112	; 0x70
 8002a06:	d063      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0x194>
 8002a08:	2b70      	cmp	r3, #112	; 0x70
 8002a0a:	f200 826b 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a0e:	2b60      	cmp	r3, #96	; 0x60
 8002a10:	f000 8194 	beq.w	8002d3c <HAL_TIM_ConfigClockSource+0x400>
 8002a14:	2b60      	cmp	r3, #96	; 0x60
 8002a16:	f200 8265 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a1a:	2b50      	cmp	r3, #80	; 0x50
 8002a1c:	f000 813d 	beq.w	8002c9a <HAL_TIM_ConfigClockSource+0x35e>
 8002a20:	2b50      	cmp	r3, #80	; 0x50
 8002a22:	f200 825f 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	f000 81e4 	beq.w	8002df4 <HAL_TIM_ConfigClockSource+0x4b8>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	f200 8259 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a32:	2b30      	cmp	r3, #48	; 0x30
 8002a34:	f000 822f 	beq.w	8002e96 <HAL_TIM_ConfigClockSource+0x55a>
 8002a38:	2b30      	cmp	r3, #48	; 0x30
 8002a3a:	f200 8253 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	f000 8229 	beq.w	8002e96 <HAL_TIM_ConfigClockSource+0x55a>
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	f200 824d 	bhi.w	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8223 	beq.w	8002e96 <HAL_TIM_ConfigClockSource+0x55a>
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	f000 8220 	beq.w	8002e96 <HAL_TIM_ConfigClockSource+0x55a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a56:	e245      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x5a8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a53      	ldr	r2, [pc, #332]	; (8002bac <HAL_TIM_ConfigClockSource+0x270>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f000 8242 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	f000 823c 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <HAL_TIM_ConfigClockSource+0x274>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	f000 8236 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <HAL_TIM_ConfigClockSource+0x278>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	f000 8230 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_TIM_ConfigClockSource+0x27c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f000 822a 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a48      	ldr	r2, [pc, #288]	; (8002bbc <HAL_TIM_ConfigClockSource+0x280>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f000 8224 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a46      	ldr	r2, [pc, #280]	; (8002bc0 <HAL_TIM_ConfigClockSource+0x284>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f000 821e 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a44      	ldr	r2, [pc, #272]	; (8002bc4 <HAL_TIM_ConfigClockSource+0x288>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f000 8218 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a42      	ldr	r2, [pc, #264]	; (8002bc8 <HAL_TIM_ConfigClockSource+0x28c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f000 8212 	beq.w	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
 8002ac4:	f241 413e 	movw	r1, #5182	; 0x143e
 8002ac8:	4837      	ldr	r0, [pc, #220]	; (8002ba8 <HAL_TIM_ConfigClockSource+0x26c>)
 8002aca:	f7fe f990 	bl	8000dee <assert_failed>
      break;
 8002ace:	e20b      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x5ac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a35      	ldr	r2, [pc, #212]	; (8002bac <HAL_TIM_ConfigClockSource+0x270>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x1c6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d00e      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x1c6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_TIM_ConfigClockSource+0x274>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x1c6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <HAL_TIM_ConfigClockSource+0x278>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x1c6>
 8002af8:	f241 4145 	movw	r1, #5189	; 0x1445
 8002afc:	482a      	ldr	r0, [pc, #168]	; (8002ba8 <HAL_TIM_ConfigClockSource+0x26c>)
 8002afe:	f7fe f976 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d013      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x1f6>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	d00e      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x1f6>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x1f6>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x1f6>
 8002b28:	f241 4148 	movw	r1, #5192	; 0x1448
 8002b2c:	481e      	ldr	r0, [pc, #120]	; (8002ba8 <HAL_TIM_ConfigClockSource+0x26c>)
 8002b2e:	f7fe f95e 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3a:	d014      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x22a>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x22a>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00c      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x22a>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d008      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x22a>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b0a      	cmp	r3, #10
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x22a>
 8002b5c:	f241 4149 	movw	r1, #5193	; 0x1449
 8002b60:	4811      	ldr	r0, [pc, #68]	; (8002ba8 <HAL_TIM_ConfigClockSource+0x26c>)
 8002b62:	f7fe f944 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	d904      	bls.n	8002b78 <HAL_TIM_ConfigClockSource+0x23c>
 8002b6e:	f241 414a 	movw	r1, #5194	; 0x144a
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <HAL_TIM_ConfigClockSource+0x26c>)
 8002b74:	f7fe f93b 	bl	8000dee <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 fd27 	bl	80035da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]
      break;
 8002ba4:	e1a1      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
 8002ba6:	bf00      	nop
 8002ba8:	08003b80 	.word	0x08003b80
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40001000 	.word	0x40001000
 8002bbc:	40001400 	.word	0x40001400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a83      	ldr	r2, [pc, #524]	; (8002de0 <HAL_TIM_ConfigClockSource+0x4a4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x2c2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d00e      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x2c2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7f      	ldr	r2, [pc, #508]	; (8002de4 <HAL_TIM_ConfigClockSource+0x4a8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x2c2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7e      	ldr	r2, [pc, #504]	; (8002de8 <HAL_TIM_ConfigClockSource+0x4ac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x2c2>
 8002bf4:	f241 415d 	movw	r1, #5213	; 0x145d
 8002bf8:	487c      	ldr	r0, [pc, #496]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002bfa:	f7fe f8f8 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d013      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x2f2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	d00e      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x2f2>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c18:	d009      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x2f2>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c22:	d004      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x2f2>
 8002c24:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8002c28:	4870      	ldr	r0, [pc, #448]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002c2a:	f7fe f8e0 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c36:	d014      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x326>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x326>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x326>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x326>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b0a      	cmp	r3, #10
 8002c56:	d004      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x326>
 8002c58:	f241 4161 	movw	r1, #5217	; 0x1461
 8002c5c:	4863      	ldr	r0, [pc, #396]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002c5e:	f7fe f8c6 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	d904      	bls.n	8002c74 <HAL_TIM_ConfigClockSource+0x338>
 8002c6a:	f241 4162 	movw	r1, #5218	; 0x1462
 8002c6e:	485f      	ldr	r0, [pc, #380]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002c70:	f7fe f8bd 	bl	8000dee <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f000 fca9 	bl	80035da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c96:	609a      	str	r2, [r3, #8]
      break;
 8002c98:	e127      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_TIM_ConfigClockSource+0x4a4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d018      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x39a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cac:	d013      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x39a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_TIM_ConfigClockSource+0x4a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x39a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <HAL_TIM_ConfigClockSource+0x4ac>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x39a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a4a      	ldr	r2, [pc, #296]	; (8002df0 <HAL_TIM_ConfigClockSource+0x4b4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x39a>
 8002ccc:	f241 4171 	movw	r1, #5233	; 0x1471
 8002cd0:	4846      	ldr	r0, [pc, #280]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002cd2:	f7fe f88c 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cde:	d014      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x3ce>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x3ce>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x3ce>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d008      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x3ce>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b0a      	cmp	r3, #10
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x3ce>
 8002d00:	f241 4174 	movw	r1, #5236	; 0x1474
 8002d04:	4839      	ldr	r0, [pc, #228]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002d06:	f7fe f872 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	d904      	bls.n	8002d1c <HAL_TIM_ConfigClockSource+0x3e0>
 8002d12:	f241 4175 	movw	r1, #5237	; 0x1475
 8002d16:	4835      	ldr	r0, [pc, #212]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002d18:	f7fe f869 	bl	8000dee <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f000 fbdf 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2150      	movs	r1, #80	; 0x50
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fc36 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 8002d3a:	e0d6      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_TIM_ConfigClockSource+0x4a4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d018      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x43c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d013      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x43c>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <HAL_TIM_ConfigClockSource+0x4a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00e      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x43c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_TIM_ConfigClockSource+0x4ac>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x43c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_TIM_ConfigClockSource+0x4b4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x43c>
 8002d6e:	f241 4181 	movw	r1, #5249	; 0x1481
 8002d72:	481e      	ldr	r0, [pc, #120]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002d74:	f7fe f83b 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d80:	d014      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0x470>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0x470>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0x470>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d008      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0x470>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b0a      	cmp	r3, #10
 8002da0:	d004      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0x470>
 8002da2:	f241 4184 	movw	r1, #5252	; 0x1484
 8002da6:	4811      	ldr	r0, [pc, #68]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002da8:	f7fe f821 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b0f      	cmp	r3, #15
 8002db2:	d904      	bls.n	8002dbe <HAL_TIM_ConfigClockSource+0x482>
 8002db4:	f241 4185 	movw	r1, #5253	; 0x1485
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <HAL_TIM_ConfigClockSource+0x4b0>)
 8002dba:	f7fe f818 	bl	8000dee <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 fbbc 	bl	8003548 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2160      	movs	r1, #96	; 0x60
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fbe5 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e085      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	08003b80 	.word	0x08003b80
 8002df0:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <HAL_TIM_ConfigClockSource+0x5c8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x4f4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e06:	d013      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x4f4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <HAL_TIM_ConfigClockSource+0x5cc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x4f4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <HAL_TIM_ConfigClockSource+0x5d0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x4f4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3b      	ldr	r2, [pc, #236]	; (8002f10 <HAL_TIM_ConfigClockSource+0x5d4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x4f4>
 8002e26:	f241 4191 	movw	r1, #5265	; 0x1491
 8002e2a:	483a      	ldr	r0, [pc, #232]	; (8002f14 <HAL_TIM_ConfigClockSource+0x5d8>)
 8002e2c:	f7fd ffdf 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e38:	d014      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x528>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x528>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x528>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d008      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x528>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b0a      	cmp	r3, #10
 8002e58:	d004      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x528>
 8002e5a:	f241 4194 	movw	r1, #5268	; 0x1494
 8002e5e:	482d      	ldr	r0, [pc, #180]	; (8002f14 <HAL_TIM_ConfigClockSource+0x5d8>)
 8002e60:	f7fd ffc5 	bl	8000dee <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d904      	bls.n	8002e76 <HAL_TIM_ConfigClockSource+0x53a>
 8002e6c:	f241 4195 	movw	r1, #5269	; 0x1495
 8002e70:	4828      	ldr	r0, [pc, #160]	; (8002f14 <HAL_TIM_ConfigClockSource+0x5d8>)
 8002e72:	f7fd ffbc 	bl	8000dee <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 fb32 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fb89 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 8002e94:	e029      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <HAL_TIM_ConfigClockSource+0x5c8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x596>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d013      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x596>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_TIM_ConfigClockSource+0x5cc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x596>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_TIM_ConfigClockSource+0x5d0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x596>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <HAL_TIM_ConfigClockSource+0x5d4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x596>
 8002ec8:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8002ecc:	4811      	ldr	r0, [pc, #68]	; (8002f14 <HAL_TIM_ConfigClockSource+0x5d8>)
 8002ece:	f7fd ff8e 	bl	8000dee <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f000 fb62 	bl	80035a6 <TIM_ITRx_SetConfig>
        break;
 8002ee2:	e002      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x5ae>
      break;
 8002ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40014000 	.word	0x40014000
 8002f14:	08003b80 	.word	0x08003b80

08002f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a35      	ldr	r2, [pc, #212]	; (8003000 <TIM_Base_SetConfig+0xe8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a32      	ldr	r2, [pc, #200]	; (8003004 <TIM_Base_SetConfig+0xec>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a31      	ldr	r2, [pc, #196]	; (8003008 <TIM_Base_SetConfig+0xf0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a28      	ldr	r2, [pc, #160]	; (8003000 <TIM_Base_SetConfig+0xe8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d017      	beq.n	8002f92 <TIM_Base_SetConfig+0x7a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d013      	beq.n	8002f92 <TIM_Base_SetConfig+0x7a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <TIM_Base_SetConfig+0xec>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00f      	beq.n	8002f92 <TIM_Base_SetConfig+0x7a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <TIM_Base_SetConfig+0xf0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00b      	beq.n	8002f92 <TIM_Base_SetConfig+0x7a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	; (800300c <TIM_Base_SetConfig+0xf4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x7a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_Base_SetConfig+0xf8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x7a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_Base_SetConfig+0xfc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <TIM_Base_SetConfig+0xe8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0xd0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <TIM_Base_SetConfig+0xf4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0xd0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <TIM_Base_SetConfig+0xf8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0xd0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <TIM_Base_SetConfig+0xfc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	615a      	str	r2, [r3, #20]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800

08003018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f023 0201 	bic.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 0302 	bic.w	r3, r3, #2
 8003060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a3c      	ldr	r2, [pc, #240]	; (8003160 <TIM_OC1_SetConfig+0x148>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_OC1_SetConfig+0x74>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <TIM_OC1_SetConfig+0x14c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_OC1_SetConfig+0x74>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <TIM_OC1_SetConfig+0x150>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_OC1_SetConfig+0x74>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a39      	ldr	r2, [pc, #228]	; (800316c <TIM_OC1_SetConfig+0x154>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d119      	bne.n	80030c0 <TIM_OC1_SetConfig+0xa8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <TIM_OC1_SetConfig+0x8e>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d004      	beq.n	80030a6 <TIM_OC1_SetConfig+0x8e>
 800309c:	f641 2141 	movw	r1, #6721	; 0x1a41
 80030a0:	4833      	ldr	r0, [pc, #204]	; (8003170 <TIM_OC1_SetConfig+0x158>)
 80030a2:	f7fd fea4 	bl	8000dee <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0308 	bic.w	r3, r3, #8
 80030ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <TIM_OC1_SetConfig+0x148>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <TIM_OC1_SetConfig+0xc8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <TIM_OC1_SetConfig+0x14c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <TIM_OC1_SetConfig+0xc8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <TIM_OC1_SetConfig+0x150>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_OC1_SetConfig+0xc8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a24      	ldr	r2, [pc, #144]	; (800316c <TIM_OC1_SetConfig+0x154>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d12d      	bne.n	800313c <TIM_OC1_SetConfig+0x124>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d008      	beq.n	80030fc <TIM_OC1_SetConfig+0xe4>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <TIM_OC1_SetConfig+0xe4>
 80030f2:	f641 214e 	movw	r1, #6734	; 0x1a4e
 80030f6:	481e      	ldr	r0, [pc, #120]	; (8003170 <TIM_OC1_SetConfig+0x158>)
 80030f8:	f7fd fe79 	bl	8000dee <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003104:	d008      	beq.n	8003118 <TIM_OC1_SetConfig+0x100>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <TIM_OC1_SetConfig+0x100>
 800310e:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8003112:	4817      	ldr	r0, [pc, #92]	; (8003170 <TIM_OC1_SetConfig+0x158>)
 8003114:	f7fd fe6b 	bl	8000dee <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800
 8003170:	08003b80 	.word	0x08003b80

08003174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a37      	ldr	r2, [pc, #220]	; (80032ac <TIM_OC2_SetConfig+0x138>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d11a      	bne.n	800320a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <TIM_OC2_SetConfig+0x7a>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d004      	beq.n	80031ee <TIM_OC2_SetConfig+0x7a>
 80031e4:	f641 218c 	movw	r1, #6796	; 0x1a8c
 80031e8:	4831      	ldr	r0, [pc, #196]	; (80032b0 <TIM_OC2_SetConfig+0x13c>)
 80031ea:	f7fd fe00 	bl	8000dee <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003208:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <TIM_OC2_SetConfig+0x138>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_OC2_SetConfig+0xb6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <TIM_OC2_SetConfig+0x140>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_OC2_SetConfig+0xb6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <TIM_OC2_SetConfig+0x144>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC2_SetConfig+0xb6>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <TIM_OC2_SetConfig+0x148>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d12f      	bne.n	800328a <TIM_OC2_SetConfig+0x116>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003232:	d008      	beq.n	8003246 <TIM_OC2_SetConfig+0xd2>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <TIM_OC2_SetConfig+0xd2>
 800323c:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8003240:	481b      	ldr	r0, [pc, #108]	; (80032b0 <TIM_OC2_SetConfig+0x13c>)
 8003242:	f7fd fdd4 	bl	8000dee <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d008      	beq.n	8003262 <TIM_OC2_SetConfig+0xee>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <TIM_OC2_SetConfig+0xee>
 8003258:	f641 219b 	movw	r1, #6811	; 0x1a9b
 800325c:	4814      	ldr	r0, [pc, #80]	; (80032b0 <TIM_OC2_SetConfig+0x13c>)
 800325e:	f7fd fdc6 	bl	8000dee <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	621a      	str	r2, [r3, #32]
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	08003b80 	.word	0x08003b80
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800

080032c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <TIM_OC3_SetConfig+0x138>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d11a      	bne.n	8003354 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <TIM_OC3_SetConfig+0x78>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b08      	cmp	r3, #8
 800332c:	d004      	beq.n	8003338 <TIM_OC3_SetConfig+0x78>
 800332e:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8003332:	4832      	ldr	r0, [pc, #200]	; (80033fc <TIM_OC3_SetConfig+0x13c>)
 8003334:	f7fd fd5b 	bl	8000dee <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <TIM_OC3_SetConfig+0x138>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00b      	beq.n	8003374 <TIM_OC3_SetConfig+0xb4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a28      	ldr	r2, [pc, #160]	; (8003400 <TIM_OC3_SetConfig+0x140>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_OC3_SetConfig+0xb4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a27      	ldr	r2, [pc, #156]	; (8003404 <TIM_OC3_SetConfig+0x144>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_OC3_SetConfig+0xb4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <TIM_OC3_SetConfig+0x148>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d12f      	bne.n	80033d4 <TIM_OC3_SetConfig+0x114>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d008      	beq.n	8003390 <TIM_OC3_SetConfig+0xd0>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <TIM_OC3_SetConfig+0xd0>
 8003386:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800338a:	481c      	ldr	r0, [pc, #112]	; (80033fc <TIM_OC3_SetConfig+0x13c>)
 800338c:	f7fd fd2f 	bl	8000dee <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003398:	d008      	beq.n	80033ac <TIM_OC3_SetConfig+0xec>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <TIM_OC3_SetConfig+0xec>
 80033a2:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80033a6:	4815      	ldr	r0, [pc, #84]	; (80033fc <TIM_OC3_SetConfig+0x13c>)
 80033a8:	f7fd fd21 	bl	8000dee <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	08003b80 	.word	0x08003b80
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800

0800340c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_OC4_SetConfig+0xcc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_OC4_SetConfig+0x78>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <TIM_OC4_SetConfig+0xd0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_OC4_SetConfig+0x78>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <TIM_OC4_SetConfig+0xd4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC4_SetConfig+0x78>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_OC4_SetConfig+0xd8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d117      	bne.n	80034b4 <TIM_OC4_SetConfig+0xa8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348c:	d008      	beq.n	80034a0 <TIM_OC4_SetConfig+0x94>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <TIM_OC4_SetConfig+0x94>
 8003496:	f641 3123 	movw	r1, #6947	; 0x1b23
 800349a:	4813      	ldr	r0, [pc, #76]	; (80034e8 <TIM_OC4_SetConfig+0xdc>)
 800349c:	f7fd fca7 	bl	8000dee <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	019b      	lsls	r3, r3, #6
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	621a      	str	r2, [r3, #32]
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800
 80034e8:	08003b80 	.word	0x08003b80

080034ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 030a 	bic.w	r3, r3, #10
 8003528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f023 0210 	bic.w	r2, r3, #16
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	031b      	lsls	r3, r3, #12
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f043 0307 	orr.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	021a      	lsls	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4313      	orrs	r3, r2
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	609a      	str	r2, [r3, #8]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a57      	ldr	r2, [pc, #348]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d01d      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a53      	ldr	r2, [pc, #332]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a51      	ldr	r2, [pc, #324]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a50      	ldr	r2, [pc, #320]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a4e      	ldr	r2, [pc, #312]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8003668:	f240 7186 	movw	r1, #1926	; 0x786
 800366c:	484b      	ldr	r0, [pc, #300]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800366e:	f7fd fbbe 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d020      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d01c      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b20      	cmp	r3, #32
 8003688:	d018      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b30      	cmp	r3, #48	; 0x30
 8003690:	d014      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d010      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b50      	cmp	r3, #80	; 0x50
 80036a0:	d00c      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b60      	cmp	r3, #96	; 0x60
 80036a8:	d008      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b70      	cmp	r3, #112	; 0x70
 80036b0:	d004      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80036b2:	f240 7187 	movw	r1, #1927	; 0x787
 80036b6:	4839      	ldr	r0, [pc, #228]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80036b8:	f7fd fb99 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	d008      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036cc:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80036d0:	4832      	ldr	r0, [pc, #200]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80036d2:	f7fd fb8c 	bl	8000dee <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e04b      	b.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x164>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d00e      	beq.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a12      	ldr	r2, [pc, #72]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a13      	ldr	r2, [pc, #76]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10c      	bne.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x152>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40001000 	.word	0x40001000
 8003794:	40001400 	.word	0x40001400
 8003798:	40014000 	.word	0x40014000
 800379c:	08003bb8 	.word	0x08003bb8

080037a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a63      	ldr	r2, [pc, #396]	; (8003940 <HAL_TIMEx_ConfigBreakDeadTime+0x1a0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a61      	ldr	r2, [pc, #388]	; (8003944 <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a60      	ldr	r2, [pc, #384]	; (8003948 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5e      	ldr	r2, [pc, #376]	; (800394c <HAL_TIMEx_ConfigBreakDeadTime+0x1ac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 80037d6:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80037da:	485d      	ldr	r0, [pc, #372]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 80037dc:	f7fd fb07 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	d008      	beq.n	80037fc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 80037f2:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80037f6:	4856      	ldr	r0, [pc, #344]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 80037f8:	f7fd faf9 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003804:	d008      	beq.n	8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 800380e:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8003812:	484f      	ldr	r0, [pc, #316]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 8003814:	f7fd faeb 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003828:	d00e      	beq.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003832:	d009      	beq.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383c:	d004      	beq.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>
 800383e:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8003842:	4843      	ldr	r0, [pc, #268]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 8003844:	f7fd fad3 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2bff      	cmp	r3, #255	; 0xff
 800384e:	d904      	bls.n	800385a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
 8003850:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8003854:	483e      	ldr	r0, [pc, #248]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 8003856:	f7fd faca 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	d008      	beq.n	8003876 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
 800386c:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8003870:	4837      	ldr	r0, [pc, #220]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 8003872:	f7fd fabc 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	d004      	beq.n	8003892 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003888:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800388c:	4830      	ldr	r0, [pc, #192]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 800388e:	f7fd faae 	bl	8000dee <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800389a:	d008      	beq.n	80038ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80038a4:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80038a8:	4829      	ldr	r0, [pc, #164]	; (8003950 <HAL_TIMEx_ConfigBreakDeadTime+0x1b0>)
 80038aa:	f7fd faa0 	bl	8000dee <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e03d      	b.n	8003938 <HAL_TIMEx_ConfigBreakDeadTime+0x198>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800
 8003950:	08003bb8 	.word	0x08003bb8
 8003954:	00000000 	.word	0x00000000

08003958 <_ZN11servo_motor12change_valueEd>:

#include "main.h"
#include "servo.h"

void servo_motor::change_value(double angle)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	e9c7 2300 	strd	r2, r3, [r7]
	new_value = ((angle/(2*PI))*((MAX_SERVO + 1 + MIN_SERVO + 1)/2)) + MIN_SERVO;
 8003964:	a314      	add	r3, pc, #80	; (adr r3, 80039b8 <_ZN11servo_motor12change_valueEd+0x60>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800396e:	f7fc ff35 	bl	80007dc <__aeabi_ddiv>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	a311      	add	r3, pc, #68	; (adr r3, 80039c0 <_ZN11servo_motor12change_valueEd+0x68>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f7fc fe02 	bl	8000588 <__aeabi_dmul>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	a30e      	add	r3, pc, #56	; (adr r3, 80039c8 <_ZN11servo_motor12change_valueEd+0x70>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fc43 	bl	800021c <__adddf3>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	f7fd f805 	bl	80009ac <__aeabi_d2uiz>
 80039a2:	4603      	mov	r3, r0
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	809a      	strh	r2, [r3, #4]
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	f3af 8000 	nop.w
 80039b8:	c083126f 	.word	0xc083126f
 80039bc:	401921ca 	.word	0x401921ca
 80039c0:	00000000 	.word	0x00000000
 80039c4:	40977000 	.word	0x40977000
 80039c8:	00000000 	.word	0x00000000
 80039cc:	408f3800 	.word	0x408f3800

080039d0 <_ZN11servo_motor13refresh_valueEv>:

void servo_motor::refresh_value()
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	if((htim_ptr == nullptr) || (Channel == 0))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02a      	beq.n	8003a36 <_ZN11servo_motor13refresh_valueEv+0x66>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d026      	beq.n	8003a36 <_ZN11servo_motor13refresh_valueEv+0x66>
		return;

	TIM_OC_InitTypeDef sConfigOC = {0};
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
 80039f8:	615a      	str	r2, [r3, #20]
 80039fa:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039fc:	2360      	movs	r3, #96	; 0x60
 80039fe:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = new_value;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	889b      	ldrh	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]

	if (HAL_TIM_PWM_ConfigChannel(htim_ptr, &sConfigOC, Channel) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f7fe fe06 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <_ZN11servo_motor13refresh_valueEv+0x68>
	{
		Error_Handler();
 8003a30:	f7fd f9d8 	bl	8000de4 <Error_Handler>
 8003a34:	e000      	b.n	8003a38 <_ZN11servo_motor13refresh_valueEv+0x68>
		return;
 8003a36:	bf00      	nop
	}
}
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	2600      	movs	r6, #0
 8003a44:	4d0c      	ldr	r5, [pc, #48]	; (8003a78 <__libc_init_array+0x38>)
 8003a46:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	f000 f822 	bl	8003a98 <_init>
 8003a54:	2600      	movs	r6, #0
 8003a56:	4d0a      	ldr	r5, [pc, #40]	; (8003a80 <__libc_init_array+0x40>)
 8003a58:	4c0a      	ldr	r4, [pc, #40]	; (8003a84 <__libc_init_array+0x44>)
 8003a5a:	1b64      	subs	r4, r4, r5
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	08003c04 	.word	0x08003c04
 8003a7c:	08003c04 	.word	0x08003c04
 8003a80:	08003c04 	.word	0x08003c04
 8003a84:	08003c0c 	.word	0x08003c0c

08003a88 <memset>:
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4402      	add	r2, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
